#include <bits/stdc++.h>
using namespace std;
class Node{
public:
	int data;
	Node *next;
	Node *pre;
	// Construcor
	Node(int dat){
		this->data=dat;
		this->next=NULL;
		this->pre=NULL;
	}
	~Node()
	{
		if(next != NULL)
		{
			delete next;
			next = NULL;
		}
	}
};
void deletethenode(Node* &head,int position)
{
	if(position == 1){
		Node *temp = head;
		temp -> next ->pre = NULL;
		head = temp-> next;
		temp ->next = NULL;
		delete temp;
	}
	else 
	{
		Node *prev=NULL;
		Node *curr = head;
		int count = 1;
		while(count < position)
		{
			prev = curr;
			curr = curr -> next;
			count++;
		}

		if(curr->next==NULL)
		{
			prev->next=NULL;
			curr->pre= NULL;
			curr->next= NULL;
			delete curr;
			return;
		}
		prev -> next = curr->next;
		curr->next->pre=prev;
		curr -> next = NULL;
		curr -> pre = NULL;		
		delete curr;
	}
}
void insertinbetw(Node* &head,int data,int item)
{
	Node *temp = head;
	Node *ins = new Node(data);
	while(temp -> data != item)
	{
		if(temp->next== NULL){
			cout << "item you wants to search is not present in the list"<<endl;
			return ;
		}
		temp= temp->next;
	}
	if(temp->next== NULL)
	{
		ins->pre=temp;
		temp->next=ins;
		return;
	}
	ins->pre=temp;
	ins->next = temp->next;
	temp->next->pre=ins;
	temp->next=ins;
}
void insertatend(Node* &head,int data)
{
	Node *temp = head;
	Node *ins = new Node(data);
	while(temp->next != NULL)
	{
		temp=temp->next;
	}

	temp->next = ins;
	ins->pre = temp; 
}
void insertathead(Node* &head,int data)
{
	Node *temp = new Node(data);
	head->pre=temp;
	temp->next=head;
	head=temp;
}
int getlength(Node* &head)
{
	Node *temp=head;
	int len = 0;
	while(temp!=NULL)
	{
		len++;
		temp = temp -> next;
	}
	return len;
}
void print(Node* &head)
{
	Node *temp=head;
	while(temp!=NULL)
	{
		cout << temp -> data << "  ";
		temp = temp -> next;
	}
	cout << endl;
}
int main()
{
	Node* head=new Node(200);
	print(head);
	cout << getlength(head) <<endl;
	insertathead(head,300);
	print(head);
	insertatend(head,400);
	print(head);
	insertinbetw(head,100,400);
	print(head);
	cout << getlength(head)<<endl;
	deletethenode(head,4);
	print(head);
}